{
  "EDITOR_STATE": {
    "allProjectFiles": {
      "054dca01-d08e-4f07-aa09-c4883e26ed90": {
        "id": "054dca01-d08e-4f07-aa09-c4883e26ed90",
        "parent": null,
        "name": "Alexa_SmartHome",
        "type": "DIRECTORY",
        "isDirectory": true,
        "children": [
          "0072dea3-287d-4f78-8aff-caa534d6190a"
        ],
        "isRemovable": false,
        "filePath": "Alexa_SmartHome"
      },
      "0072dea3-287d-4f78-8aff-caa534d6190a": {
        "id": "0072dea3-287d-4f78-8aff-caa534d6190a",
        "parent": "054dca01-d08e-4f07-aa09-c4883e26ed90",
        "name": "lambda.js",
        "type": "LAMBDA_FILE",
        "isDirectory": false,
        "children": [],
        "isRemovable": true,
        "filePath": "Alexa_SmartHome/lambda.js",
        "code": "var http = require('http');\n\n\nfunction buildSpeechletResponse(title, output, repromptText, shouldEndSession) {\n    return {\n        outputSpeech: {\n            type: 'PlainText',\n            text: output,\n        },\n        card: {\n            type: 'Simple',\n            title: `SessionSpeechlet - ${title}`,\n            content: `SessionSpeechlet - ${output}`,\n        },\n        reprompt: {\n            outputSpeech: {\n                type: 'PlainText',\n                text: repromptText,\n            },\n        },\n        shouldEndSession,\n    };\n}\nfunction buildResponse(sessionAttributes, speechletResponse) {\n    return {\n        version: '1.0',\n        sessionAttributes,\n        response: speechletResponse,\n    };\n}\n\n\nfunction onSessionStarted(sessionStartedRequest, session) {\n    console.log(`onSessionStarted requestId=${sessionStartedRequest.requestId}, sessionId=${session.sessionId}`);\n}\n\nfunction onLaunch(launchRequest, session, callback) {\n    console.log(`onLaunch requestId=${launchRequest.requestId}, sessionId=${session.sessionId}`);\n// Dispatch to your skill's launch.\n    getWelcomeResponse(callback);\n}\n\nfunction getWelcomeResponse(callback) {\n    const sessionAttributes = {};\n    const cardTitle = 'Welcome';\n    const speechOutput = 'Welcome to the Friday Tech talk demo' ;\n   \n    const repromptText = 'Hey priyal : which light should I control ?' ;\n    const shouldEndSession = false;\ncallback(sessionAttributes,\n        buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));\n}\n\n\nfunction onIntent(intentRequest, session, callback) {\n    console.log(`onIntent requestId=${intentRequest.requestId}, sessionId=${session.sessionId}`);\nconst intent = intentRequest.intent;\n    const intentName = intentRequest.intent.name;\n// Dispatch to your skill's intent handlers\n    if (intentName === 'AMAZON.HelpIntent') {\n        getWelcomeResponse(callback);\n    } else if (intentName === 'AMAZON.StopIntent') {\n        handleSessionEndRequest(callback);\n    } else if (intentName === 'lights') {\n        var color = intent.slots.color.value;\n        var lightstatus = intent.slots.lightstatus.value;\n        lights(callback,color,lightstatus);\n    } else if (intentName === 'HelloWorldIntent') {\n        securelight(callback);\n    } \n}\n\nfunction handleSessionEndRequest(callback) {\n    const cardTitle = 'Session Ended';\n    const speechOutput = 'Thank you for using Friday Tech talk demo, have a nice week end!';\n    const shouldEndSession = true;\ncallback({}, buildSpeechletResponse(cardTitle, speechOutput, null, shouldEndSession));\n}\n\n\n\nfunction lights(callback,color,lightstatus) {\n    \n   var _switch = \"\";\n   var _status = \"\";\n   \n   if(color == \"red\")\n        _switch = \"V1\";\n   else if(color == \"green\")\n        _switch = \"V2\";\n   else if(color == \"orange\")\n        _switch = \"V0\";\n   else\n        _switch = \"error\";\n        \n    if(lightstatus == \"on\")\n        _status = \"1\";\n    else if(lightstatus == \"off\")\n        _status = \"0\";\n    \n   var endpoint = \"http://13.232.30.228:8080/ad05422526054585af9097a984f0177f/update/\"+_switch+\"?value=\"+_status;\n            var status =\"offline\";\n            var body = \"\";\n            http.get(endpoint, (response) => {\n              console.log(\"Got response: \" + response.statusCode)\n              response.on('data', (chunk) => { body += chunk })\n              response.on('end', () => {\n              })\n            });\n   \n    const sessionAttributes = {};\n    \n    //Get card title from data\n    const cardTitle = 'device status';\n    \n    //Get output from data\n    const speechOutput = 'The  ' + color + '  light is turned '+ lightstatus;\n    const repromptText = '' ;\n    const shouldEndSession = false;\ncallback(sessionAttributes,\n        buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));\n}\n\n\nfunction securelight(callback) {\n   \n    const sessionAttributes = {};\n    \n    //Get card title from data\n    const cardTitle = 'device status';\n    \n    //Get output from data\n    const speechOutput = 'The hood light is switched off ';\n    const repromptText = '' ;\n    const shouldEndSession = false;\ncallback(sessionAttributes,\n        buildSpeechletResponse(cardTitle, speechOutput, repromptText, shouldEndSession));\n}\n\n\n\nfunction onSessionEnded(sessionEndedRequest, session) {\n    console.log(`onSessionEnded requestId=${sessionEndedRequest.requestId}, sessionId=${session.sessionId}`);\n    // Add cleanup logic here\n}\n\nexports.handler = (event, context, callback) => {\n    try {\n        console.log(`event.session.application.applicationId=${event.session.application.applicationId}`);\n\n\nif (event.session.new) {\n            onSessionStarted({ requestId: event.request.requestId }, event.session);\n        }\nif (event.request.type === 'LaunchRequest') {\n            onLaunch(event.request,\n                event.session,\n                (sessionAttributes, speechletResponse) => {\n                    callback(null, buildResponse(sessionAttributes, speechletResponse));\n                });\n        } else if (event.request.type === 'IntentRequest') {\n            onIntent(event.request,\n                event.session,\n                (sessionAttributes, speechletResponse) => {\n                    callback(null, buildResponse(sessionAttributes, speechletResponse));\n                });\n        } else if (event.request.type === 'SessionEndedRequest') {\n            onSessionEnded(event.request, event.session);\n            callback();\n        }\n    } catch (err) {\n        callback(err);\n    }\n};",
        "triggers": [],
        "config": {
          "runtime": "nodejs8.10",
          "timeout": 60,
          "memory": 128
        },
        "testCases": {
          "770533b6-6adb-4594-a167-080aa0073fac": {
            "id": "770533b6-6adb-4594-a167-080aa0073fac",
            "name": "Unnamed event",
            "functionId": "0072dea3-287d-4f78-8aff-caa534d6190a",
            "event": "{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}"
          }
        }
      }
    },
    "deletedFiles": [],
    "rootNode": "054dca01-d08e-4f07-aa09-c4883e26ed90",
    "openFiles": [
      "0072dea3-287d-4f78-8aff-caa534d6190a"
    ],
    "currentFileId": "0072dea3-287d-4f78-8aff-caa534d6190a",
    "resources": {},
    "envVariables": [
      {
        "lambdaId": "all",
        "varKey": "SIGMA_AWS_ACC_ID",
        "varValue": null,
        "shouldPersist": false,
        "displayOnly": false,
        "editable": false
      }
    ],
    "packageJSON": {
      "dependencies": {}
    },
    "lambdaId": "0072dea3-287d-4f78-8aff-caa534d6190a"
  },
  "PROJECT_META": {
    "projectName": "Alexa_SmartHome",
    "projectDescription": "Alexa integration for Smart Home",
    "projectVersion": "1.0.0",
    "projectRegion": "eu-west-1",
    "platform": "AWS",
    "platformRegions": {},
    "lastSave": 1546875253162
  },
  "VCS_STATE": {
    "provider": "GitHub",
    "repo": {
      "name": "Alexa_SmartHome",
      "url": "https://github.com/stefanomoccia/Alexa_SmartHome"
    }
  }
}